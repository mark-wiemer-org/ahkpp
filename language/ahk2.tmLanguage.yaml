# Adapted from https://github.com/thqby/vscode-autohotkey2-lsp/blob/7b0ec9eccd57d05c8f75edf204928fe084e65552/syntaxes/ahk2.tmLanguage.json
---
name: AutoHotkey v2
scopeName: source.ahk2
patterns:
  - include: '#compiler_directive'
  - include: '#comments'
  - include: '#hotkey_hotstring'
  - include: '#switch_statement'
  - include: '#object_property'
  - match: "(?<!\\.)((?i:catch))(\\s+\\(?\\s*([\\w.]+(\\s*,\\s*[\\w.]+)*)?(\\s+((?i:as))\\s+(\\w+))?)?\\s*\\)?"
    captures:
      '1':
        name: keyword.control.ahk2
      '3':
        patterns:
          - match: "\\b(?i:as)\\b"
            name: keyword.control.ahk2
          - include: '#default_classes'
          - match: ','
            name: punctuation.separator.comma.ahk2
          - match: "(?<!\\.)\\b\\w+\\b"
            name: entity.name.type.class.ahk2
      '6':
        name: keyword.control.ahk2
      '7':
        name: variable.other.ahk2
  - include: '#reserved'
  - match: "(?<=^\\s*)(?i:macro)(?=\\s+\\w+\\()"
    name: storage.modifier.ahk2
  - include: '#numbers'
  - include: '#operators'
  - include: '#strings'
  - include: '#pre_definition'
  - include: '#class_block'
  - include: '#default_classes'
  - include: '#function_defaultLibrary'
  - include: '#variables'
  - include: '#block'
  - include: '#continuation_section'
  - include: '#parens'
  - include: '#function_call'
  - name: variable.other.property.ahk2
    match: "\\b(?<=\\.)[_[:alnum:]]+\\b"
  - match: ','
    name: punctuation.separator.comma.ahk2
repository:
  block:
    patterns:
      - begin: '{'
        beginCaptures:
          '0':
            name: punctuation.section.block.begin.ahk2
        end: '}'
        endCaptures:
          '0':
            name: punctuation.section.block.end.ahk2
        patterns:
          - include: '#block_innards'
  block_innards:
    patterns:
      - include: '#object_property'
      - name: meta.initialization.ahk2
        begin:
          "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|return)\n\t(?<=\\w) \\s+(and|not|or|xor)
          \ # or word + space before name\n  )\n)\n(\n  (?:[_[:alpha:]][[:alnum:]_]*+
          | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\)
          | \\[\\]))\n)\n\\s*(\\() # opening bracket"
        beginCaptures:
          '1':
            name: variable.other.ahk2
          '2':
            name: punctuation.section.parens.begin.bracket.round.initialization.ahk2
        end: "\\)"
        endCaptures:
          '0':
            name: punctuation.section.parens.end.bracket.round.initialization.ahk2
        patterns:
          - include: '$base'
      - begin: '{'
        beginCaptures:
          '0':
            name: punctuation.section.block.begin.ahk2
        end: '}'
        endCaptures:
          '0':
            name: punctuation.section.block.end.ahk2
        patterns:
          - include: '#block_innards'
      - include: '$base'
  case_statement:
    name: meta.conditional.case.ahk2
    begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)(?i:case)(?!\\w))"
    beginCaptures:
      '1':
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
      '2':
        name: comment.block.ahk2 punctuation.definition.comment.begin.ahk2
      '3':
        name: comment.block.ahk2
      '4':
        patterns:
          - match: "\\*\\/"
            name: comment.block.ahk2 punctuation.definition.comment.end.ahk2
          - match: "\\*"
            name: comment.block.ahk2
      '5':
        name: keyword.control.case.ahk2
    end: '(:)'
    endCaptures:
      '1':
        name: punctuation.separator.colon.case.ahk2
    patterns:
      - include: '#strings'
      - include: '#numbers'
      - match: ','
        name: punctuation.separator.comma.ahk2
      - match: "\\.(?=\\w)"
        name: punctuation.accessor.ahk2
      - include: '#function_call'
      - match: '{'
        name: punctuation.section.block.begin.ahk2
      - match: '}'
        name: punctuation.section.block.end.ahk2
      - match: "\\[|\\("
        name: punctuation.section.parens.begin.ahk2
      - match: "\\]|\\)"
        name: punctuation.section.parens.end.ahk2
      - include: '#operators'
      - include: '#variables'
  class_block:
    name: meta.block.class.ahk2
    begin: "(^|(?<=^\\s*\\*/))\\s*((?i:class))\\s+(\\w+(\\.\\w+)*)"
    beginCaptures:
      '2':
        name: storage.type.class.ahk2
      '3':
        name: entity.name.type.class.ahk2
    end: '}'
    endCaptures:
      '0':
        name: punctuation.definition.block.class.end.ahk2
    patterns:
      - begin: "\\G(?!\\{)"
        end: "(?=\\{)"
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
          - match: "\\b((?i:extends))(\\s+([\\w.]+))?"
            captures:
              '1':
                name: storage.modifier.ahk2
              '3':
                patterns:
                  - match: "\\.(?=\\w)"
                    name: punctuation.accessor.ahk2
                  - include: '#default_classes'
                  - match: "\\b[^.]+\\b"
                    name: entity.name.type.class.ahk2
      - begin: "\\{"
        beginCaptures:
          '0':
            name: punctuation.definition.block.class.begin.ahk2
        end: '(?=})'
        name: meta.block.class.body.ahk2
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
          - match: "(?<=^\\s*)(?i:static)(?=\\s+\\w)"
            name: storage.modifier.ahk2
          - begin: "(?<=^\\s*(?i:static\\s+)?)(\\w+)\\s*(=>)(\\s+(;.*)\\n|\\s*\\n)?"
            beginCaptures:
              '1':
                patterns:
                  - match: "\\b(?i:__item)\\b"
                    name: storage.type.metafunction.ahk2
                name: variable.other.property.ahk2
              '2':
                name: storage.type.function.arrow.ahk2
              '4':
                name: comment.inline.ahk2
            end: "(?=\\n)"
            name: meta.block.prototype.body.ahk2
            patterns:
              - include: '#line_continue'
              - include: '$base'
          - match: "(?<=(^\\s*(?i:static\\s+)?|,\\s*))\\w+(?=\\s*:=)"
            captures:
              '0':
                patterns:
                  - match: "\\b(?i:__item)\\b"
                    name: storage.type.metafunction.ahk2
                name: variable.other.property.ahk2
          - begin: "(?<=^\\s*(?i:static\\s+)?)(\\w+)(?=\\()"
            beginCaptures:
              '1':
                patterns:
                  - match: "\\b(__(?i:new|init|enum|get|call|set|delete))\\b"
                    name: storage.type.metafunction.ahk2
                name: entity.name.function.method.ahk2
            end: "(?=\\n)"
            name: meta.block.method.ahk2
            patterns:
              - begin: "\\G\\("
                beginCaptures:
                  '0':
                    name: punctuation.definition.parameters.begin.ahk2
                end: "\\)"
                endCaptures:
                  '0':
                    name: punctuation.definition.parameters.end.ahk2
                patterns:
                  - include: '$base'
              - begin: '{'
                beginCaptures:
                  '0':
                    name: punctuation.definition.block.method.begin.ahk2
                end: '}'
                endCaptures:
                  '0':
                    name: punctuation.definition.block.method.end.ahk2
                name: meta.block.method.body.ahk2
                patterns:
                  - include: '$base'
              - begin: "(=>)(\\s+(;.*)\\n|\\s*\\n)?"
                beginCaptures:
                  '1':
                    name: storage.type.function.arrow.ahk2
                  '3':
                    name: comment.inline.ahk2
                end: "(?=\\n)"
                name: meta.block.method.body.ahk2
                patterns:
                  - include: '#line_continue'
                  - include: '$base'
              - include: '#compiler_directive'
              - include: '#comments'
          - begin: "(?<=^\\s*(?i:static\\s+)?)\\b\\w+\\b(?=(\\[|\\s*\\{?(\\s;.*)?\\n))"
            beginCaptures:
              '0':
                patterns:
                  - match: "\\b(?i:__item)\\b"
                    name: storage.type.metafunction.ahk2
                name: variable.other.property.ahk2
            name: meta.block.property.ahk2
            end: "(?=\\n)"
            endCaptures:
              '1':
                name: punctuation.definition.block.property.end.ahk2
            patterns:
              - begin: "\\G\\["
                beginCaptures:
                  '0':
                    name: punctuation.definition.parameters.begin.ahk2
                end: "\\]"
                endCaptures:
                  '0':
                    name: punctuation.definition.parameters.end.ahk2
                patterns:
                  - include: '$base'
              - include: '#compiler_directive'
              - include: '#comments'
              - begin: '{'
                beginCaptures:
                  '0':
                    name: punctuation.definition.block.property.begin.ahk2
                end: '(?=})'
                endCaptures:
                  '0':
                    name: punctuation.definition.block.property.end.ahk2
                name: meta.block.property.body.ahk2
                patterns:
                  - begin: "(?<=^\\s*)(?i:set)\\b"
                    beginCaptures:
                      '0':
                        name: storage.type.setter.ahk2
                    end: "(?=\\n)"
                    patterns:
                      - include: '#compiler_directive'
                      - include: '#comments'
                      - begin: '{'
                        beginCaptures:
                          '0':
                            name: punctuation.definition.block.property.setter.begin.ahk2
                        name: meta.block.property.setter.body.ahk2
                        end: '}'
                        endCaptures:
                          '0':
                            name: punctuation.definition.block.property.setter.end.ahk2
                        patterns:
                          - include: '$base'
                      - begin: "(=>)(\\s+(;.*)\\n|\\s*\\n)?"
                        beginCaptures:
                          '1':
                            name: storage.type.function.arrow.ahk2
                          '3':
                            name: comment.inline.ahk2
                        name: meta.block.property.setter.body.ahk2
                        end: "(?=\\n)"
                        patterns:
                          - include: '#line_continue'
                          - include: '$base'
                  - begin: "(?<=^\\s*)(?i:get)\\b"
                    beginCaptures:
                      '0':
                        name: storage.type.getter.ahk2
                    end: "(?=\\n)"
                    patterns:
                      - include: '#compiler_directive'
                      - include: '#comments'
                      - begin: '{'
                        beginCaptures:
                          '0':
                            name: punctuation.definition.block.property.getter.begin.ahk2
                        name: meta.block.property.getter.body.ahk2
                        end: '}'
                        endCaptures:
                          '0':
                            name: punctuation.definition.block.property.getter.end.ahk2
                        patterns:
                          - include: '$base'
                      - begin: "(=>)(\\s+(;.*)\\n|\\s*\\n)?"
                        beginCaptures:
                          '1':
                            name: storage.type.function.arrow.ahk2
                          '3':
                            name: comment.inline.ahk2
                        name: meta.block.property.getter.body.ahk2
                        end: "(?=\\n)"
                        patterns:
                          - include: '#line_continue'
                          - include: '$base'
                  - include: '$base'
              - begin: "(=>)(\\s+(;.*)\\n|\\s*\\n)?"
                beginCaptures:
                  '1':
                    name: storage.type.function.arrow.ahk2
                  '3':
                    name: comment.inline.ahk2
                name: meta.block.property.getter.body.ahk2
                end: "(?=\\n)"
                patterns:
                  - include: '#line_continue'
                  - include: '$base'
              - include: '#variables'
          - include: '#class_block'
          - include: '#line_continue'
          - include: '$base'
  comments:
    patterns:
      - name: comment.block.ahk2
        begin: "^\\s*(\\/\\*)"
        beginCaptures:
          '1':
            name: punctuation.definition.comment.begin.ahk2
        end: "(^\\s*\\*\\/|(\\*\\/)\\s*$)"
        endCaptures:
          '1':
            name: punctuation.definition.comment.end.ahk2
        patterns:
          - include: '#docblock'
      - name: comment.line.ahk2
        match: "(?<=(^\\s*|\\s))(;.*)"
  compiler_directive:
    patterns:
      - name: comment.block.ahk2
        begin: "^\\s*(\\/\\*)((?i:@ahk2exe-keep))"
        beginCaptures:
          '1':
            name: punctuation.definition.comment.begin.ahk2
          '2':
            name: keyword.control.directive.conditional.ahk2
        end: "^\\s*(\\*\\/)"
        endCaptures:
          '1':
            name: punctuation.definition.comment.end.ahk2
      - match: "^\\s*;@(?i:ahk2exe-ignore(begin|end))"
        name: keyword.control.directive.ahk2
      - begin: "^\\s*(;@(?i:ahk2exe-let))\\s"
        beginCaptures:
          '0':
            name: keyword.control.directive.ahk2
        end: "(?=\\n)"
        patterns:
          - include: '#strings'
          - include: '#numbers'
          - match: "\\b([_[:alpha:]][_[:alnum:]]*)(?=\\s*=)"
            name: constant.language.ahk2
          - match: '='
            name: keyword.operator.assignment.ahk2
          - match: ','
            name: punctuation.separator.comma.ahk2
      - match: "^\\s*;@(?i:ahk2exe-\\w+)\\b(\\s.*)?"
        name: keyword.control.directive.ahk2
        captures:
          '1':
            name: string.literal.ahk2
      - begin: "^\\s*((;@)(?i:include))\\b"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
        end: "(?=\\n)"
        name: meta.preprocessor.include.ahk2
        patterns:
          - begin: "[^\\s;]"
            end: "(?=(?:\\s+;))|(?=\\n)"
            name: meta.embedded.ahk2 string.literal.include.ahk2
          - match: "(?:\\s+);.*"
            name: comment.line.ahk2
  conditional_context:
    patterns:
      - include: '$self'
      - include: '#block_innards'
  continuation_section:
    name: meta.parens.continuation_section.ahk2
    begin: "(?<=^\\s*)(\\()(((?i:join)\\S*(?=\\s|$)|[^()]+(?=\\s|$))*)$"
    beginCaptures:
      '1':
        name: punctuation.section.parens.begin.ahk2
      '2':
        name: string.options.ahk2 markup.italic
        patterns:
          - match: "(?<=\\s);.*$"
            name: comment.inline.ahk2
          - match: "(?<=(\\s|^\\s*\\())((?!(?i:(c(om(ments)?)?|[lr]trim0?|`|join(`s|\\S){0,15}))(?=(\\s|$)))(\\S+)(?=(\\s|$)))"
            name: invalid.options.ahk2 markup.strikethrough
    end: "^\\s*(\\))"
    endCaptures:
      '1':
        name: punctuation.section.parens.end.ahk2
    patterns:
      - include: '#continuation_section_innards'
  continuation_section_innards:
    patterns:
      - begin: ('|")
        beginCaptures:
          '1':
            name: punctuation.definition.string.begin.ahk2
        end: "(\\1)|(?=^\\s*\\))"
        endCaptures:
          '1':
            name: punctuation.definition.string.end.ahk2
        name: string.continuation_section_innards.ahk2
        patterns:
          - include: '#string_escaped_char'
      - include: '#variables'
      - match: '{'
        name: punctuation.section.block.begin.ahk2
      - match: '}'
        name: punctuation.section.block.end.ahk2
      - match: "\\["
        name: punctuation.section.parens.begin.ahk2
      - match: "\\]"
        name: punctuation.section.parens.end.ahk2
      - include: '#parens'
      - include: '$base'
  default_classes:
    patterns:
      - begin: "(?<!\\.)\\b(?i:Gui)\\b"
        beginCaptures:
          '0':
            name: support.class.ahk2
        end: "(?=([^\\s.;]|\\.[^\\w]))"
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
          - match: "(\\.)(?i)(ActiveX|Button|CheckBox|ComboBox|Control|Custom|DateTime|DDL|Edit|GroupBox|Hotkey|Link|List|ListBox|ListView|MonthCal|Pic|Progress|Radio|Slider|StatusBar|Tab|Text|TreeView|UpDown)\\b"
            captures:
              '1':
                name: punctuation.accessor.ahk2
              '2':
                name: support.class.guicontrol.ahk2
          - match: "\\."
            name: punctuation.accessor.ahk2
      - name: support.class.ahk2
        match: "(?<!\\.)\\b(?i:Any|Array|BoundFunc|Buffer|Class|ClipboardAll|Closure|ComObjArray|ComObject|ComValue|ComValueRef|Enumerator|Error|File|Float|Func|Gui|IndexError|InputHook|Integer|KeyError|Map|MemberError|MemoryError|Menu|MenuBar|MethodError|Number|Object|OSError|Primitive|PropertyError|RegExMatchInfo|String|TargetError|TimeoutError|TypeError|ValueError|VarRef|ZeroDivisionError)\\b"
  default_statement:
    name: meta.conditional.default.ahk2
    match: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)(?i:default))\\s*(:?)"
    captures:
      '1':
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
      '2':
        name: comment.block.ahk2 punctuation.definition.comment.begin.ahk2
      '3':
        name: comment.block.ahk2
      '4':
        patterns:
          - match: "\\*\\/"
            name: comment.block.ahk2 punctuation.definition.comment.end.ahk2
          - match: "\\*"
            name: comment.block.ahk2
      '5':
        name: keyword.control.default.ahk2
      '6':
        name: punctuation.separator.colon.case.default.ahk2
  docblock:
    patterns:
      - match: |-
          (?x)
          ((@)(?:access|api))
          \s+
          (private|protected|public)
          \b
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: constant.language.access-type.jsdoc
      - match: |-
          (?x)
          ((@)author)
          \s+
          (
            [^@\s<>*/]
            (?:[^@<>*/]|\*[^/])*
          )
          (?:
            \s*
            (<)
            ([^>\s]+)
            (>)
          )?
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: entity.name.type.instance.jsdoc
          '4':
            name: punctuation.definition.bracket.angle.begin.jsdoc
          '5':
            name: constant.other.email.link.underline.jsdoc
          '6':
            name: punctuation.definition.bracket.angle.end.jsdoc
      - match: |-
          (?x)
          ((@)borrows) \s+
          ((?:[^@\s*/]|\*[^/])+)    # <that namepath>
          \s+ (as) \s+              # as
          ((?:[^@\s*/]|\*[^/])+)    # <this namepath>
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: entity.name.type.instance.jsdoc
          '4':
            name: keyword.operator.control.jsdoc
          '5':
            name: entity.name.type.instance.jsdoc
      - name: meta.embedded.ahk2 meta.example.jsdoc
        begin: "((@)example)\\s+"
        end: "(?=@|\\*+/)"
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
        patterns:
          - match: "^\\s*\\*\\s"
            name: comment.block.ahk2
          - contentName: constant.other.description.jsdoc
            begin: "\\G(<)caption(>)"
            beginCaptures:
              '0':
                name: entity.name.tag.inline.jsdoc
              '1':
                name: punctuation.definition.bracket.angle.begin.jsdoc
              '2':
                name: punctuation.definition.bracket.angle.end.jsdoc
            end: "(</)caption(>)|(?=\\*/)"
            endCaptures:
              '0':
                name: entity.name.tag.inline.jsdoc
              '1':
                name: punctuation.definition.bracket.angle.begin.jsdoc
              '2':
                name: punctuation.definition.bracket.angle.end.jsdoc
            patterns:
              - match: "^\\s*\\*\\s"
                name: comment.block.ahk2
          - include: '$base'
      - name: meta.embedded.ahk2 meta.overload.ahk2
        begin: "((@)overload)\\s+"
        end: "(?=\\n|^\\s*\\*)"
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
        patterns:
          - include: '$base'
      - match:
          "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef)
          \\b"
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: constant.language.symbol-type.jsdoc
      - match: |-
          (?x)
          ((@)see)
          \s+
          (?:
            # URL
            (
              (?=https?://)
              (?:[^\s*]|\*[^/])+
            )
            |
            # JSDoc namepath
            (
              (?!
                # Avoid matching bare URIs (also acceptable as links)
                https?://
                |
                # Avoid matching {@inline tags}; we match those below
                (?:\[[^\[\]]*\])? # Possible description [preceding]{@tag}
                {@(?:link|linkcode|linkplain|tutorial)\b
              )
              # Matched namepath
              (?:[^@\s*/]|\*[^/])+
            )
          )
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: variable.other.link.underline.jsdoc
          '4':
            name: entity.name.type.instance.jsdoc
      - match: |-
          (?x)
          ((@)template)
          \s+
          # One or more valid identifiers
          (
            [A-Za-z_$]         # First character: non-numeric word character
            [\w$.\[\]]*        # Rest of identifier
            (?:                # Possible list of additional identifiers
              \s* , \s*
              [A-Za-z_$]
              [\w$.\[\]]*
            )*
          )
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: variable.other.jsdoc
      - match: |-
          (?x)
          (
            (@)
            (?:arg|argument|const|constant|member|namespace|param|var)
          )
          \s+
          (
            [A-Za-z_$]
            [\w$.\[\]]*
          )
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: variable.other.jsdoc
      - begin: "((@)typedef)\\s+(?={)"
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
        end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])"
        patterns:
          - include: '#jsdoctype'
          - name: entity.name.type.instance.jsdoc
            match: "(?:[^@\\s*/]|\\*[^/])+"
      - begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)"
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
        end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])"
        patterns:
          - include: '#jsdoctype'
          - name: variable.other.jsdoc
            match: "([A-Za-z_$][\\w$.\\[\\]]*)"
          - name: variable.other.jsdoc
            match: |-
              (?x)
              (\[)\s*
              [\w$]+
              (?:
                (?:\[\])?                                        # Foo[ ].bar properties within an array
                \.                                                # Foo.Bar namespaced parameter
                [\w$]+
              )*
              (?:
                \s*
                (=)                                                # [foo=bar] Default parameter value
                \s*
                (
                  # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
                  (?>
                    "(?:(?:\*(?!/))|(?:\\(?!"))|[^*\\])*?" |                      # [foo="bar"] Double-quoted
                    '(?:(?:\*(?!/))|(?:\\(?!'))|[^*\\])*?' |                      # [foo='bar'] Single-quoted
                    \[ (?:(?:\*(?!/))|[^*])*? \] |                                # [foo=[1,2]] Array literal
                    (?:(?:\*(?!/))|\s(?!\s*\])|\[.*?(?:\]|(?=\*/))|[^*\s\[\]])*   # Everything else
                  )*
                )
              )?
              \s*(?:(\])((?:[^*\s]|\*[^\s/])+)?|(?=\*/))
            captures:
              '1':
                name: punctuation.definition.optional-value.begin.bracket.square.jsdoc
              '2':
                name: keyword.operator.assignment.jsdoc
              '3':
                name: meta.embedded.ahk2
              '4':
                name: punctuation.definition.optional-value.end.bracket.square.jsdoc
              '5':
                name: invalid.illegal.syntax.jsdoc
      - begin: |-
          (?x)
          (
            (@)
            (?:define|enum|exception|export|extends|lends|implements|modifies
            |namespace|private|protected|returns?|suppress|this|throws|type
            |yields?)
          )
          \s+(?={)
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
        end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])"
        patterns:
          - include: '#jsdoctype'
      - match: |-
          (?x)
          (
            (@)
            (?:alias|augments|callback|constructs|emits|event|fires|exports?
            |extends|external|function|func|host|lends|listens|interface|memberof!?
            |method|module|mixes|mixin|name|requires|see|this|typedef|uses)
          )
          \s+
          (
            (?:
              [^{}@\s*] | \*[^/]
            )+
          )
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: entity.name.type.instance.jsdoc
      - contentName: variable.other.jsdoc
        begin: ((@)(?:default(?:value)?|license|version))\s+(([''"]))
        beginCaptures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: variable.other.jsdoc
          '4':
            name: punctuation.definition.string.begin.jsdoc
        end: "(\\3)|(?=$|\\*/)"
        endCaptures:
          '0':
            name: variable.other.jsdoc
          '1':
            name: punctuation.definition.string.end.jsdoc
      - match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)"
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
          '3':
            name: variable.other.jsdoc
      - name: storage.type.class.jsdoc
        match:
          "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles
          |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright
          |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception
          |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func
          |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc
          |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method
          |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects
          |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected
          |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary
          |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation
          |version|virtual|writeOnce|yields?) \\b"
        captures:
          '1':
            name: punctuation.definition.block.tag.jsdoc
      - include: '#inline-tags'
      - match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)"
        captures:
          '1':
            name: storage.type.class.jsdoc
          '2':
            name: punctuation.definition.block.tag.jsdoc
  function_call:
    match: "([_[:alpha:]][[:alnum:]_]*+)(?=\\()"
    captures:
      '1':
        name: entity.name.function.ahk2
        patterns:
          - match: "(?<=\\.).+"
            name: entity.name.function.method.ahk2
          - include: '#variables_language'
  function_call_notparens:
    patterns:
      - match: "(?<=^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\b(?<!^\\s*(?i:class)\\b))(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))"
        name: entity.name.function.ahk2
        captures:
          '0':
            patterns:
              - include: '#function_defaultLibrary'
      - match: "(?<=(^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\.)+)([[:alpha:]_][[:alnum:]_]*\\b)(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))"
        name: entity.name.function.method.ahk2
  function_defaultLibrary:
    patterns:
      - match: "(?<!\\.)\\b(?i:Abs|ACos|ASin|ATan|BlockInput|CallbackCreate|CallbackFree|CaretGetPos|Ceil|Chr|Click|ClipWait|ComCall|ComObjActive|ComObjConnect|ComObjFlags|ComObjFromPtr|ComObjGet|ComObjQuery|ComObjType|ComObjValue|ControlAddItem|ControlChooseIndex|ControlChooseString|ControlClick|ControlDeleteItem|ControlFindItem|ControlFocus|ControlGetChecked|ControlGetChoice|ControlGetClassNN|ControlGetEnabled|ControlGetExStyle|ControlGetFocus|ControlGetHwnd|ControlGetIndex|ControlGetItems|ControlGetPos|ControlGetStyle|ControlGetText|ControlGetVisible|ControlHide|ControlHideDropDown|ControlMove|ControlSend|ControlSendText|ControlSetChecked|ControlSetEnabled|ControlSetExStyle|ControlSetStyle|ControlSetText|ControlShow|ControlShowDropDown|CoordMode|Cos|Critical|DateAdd|DateDiff|DetectHiddenText|DetectHiddenWindows|DirCopy|DirCreate|DirDelete|DirExist|DirMove|DirSelect|DllCall|Download|DriveEject|DriveGetCapacity|DriveGetFilesystem|DriveGetLabel|DriveGetList|DriveGetSerial|DriveGetSpaceFree|DriveGetStatus|DriveGetStatusCD|DriveGetType|DriveLock|DriveRetract|DriveSetLabel|DriveUnlock|Edit|EditGetCurrentCol|EditGetCurrentLine|EditGetLine|EditGetLineCount|EditGetSelectedText|EditPaste|EnvGet|EnvSet|Exit|ExitApp|Exp|FileAppend|FileCopy|FileCreateShortcut|FileDelete|FileEncoding|FileExist|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileOpen|FileRead|FileRecycle|FileRecycleEmpty|FileSelect|FileSetAttrib|FileSetTime|Floor|Format|FormatTime|GetKeyName|GetKeySC|GetKeyState|GetKeyVK|GetMethod|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|GuiCtrlFromHwnd|GuiFromHwnd|HasBase|HasMethod|HasProp|HotIf|HotIfWinActive|HotIfWinExist|HotIfWinNotActive|HotIfWinNotExist|Hotkey|Hotstring|IL_Add|IL_Create|IL_Destroy|ImageSearch|IniDelete|IniRead|IniWrite|InputBox|InstallKeybdHook|InstallMouseHook|InStr|IsAlnum|IsAlpha|IsDigit|IsFloat|IsInteger|IsLabel|IsLower|IsNumber|IsObject|IsSetRef|IsSpace|IsTime|IsUpper|IsXDigit|KeyHistory|KeyWait|ListHotkeys|ListLines|ListVars|ListViewGetContent|Ln|LoadPicture|Log|LTrim|Max|MenuFromHandle|MenuSelect|Min|Mod|MonitorGet|MonitorGetCount|MonitorGetName|MonitorGetPrimary|MonitorGetWorkArea|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|NumGet|NumPut|ObjAddRef|ObjBindMethod|ObjFromPtr|ObjFromPtrAddRef|ObjGetBase|ObjGetCapacity|ObjHasOwnProp|ObjOwnPropCount|ObjOwnProps|ObjPtr|ObjPtrAddRef|ObjRelease|ObjSetBase|ObjSetCapacity|OnClipboardChange|OnError|OnExit|OnMessage|Ord|OutputDebug|Pause|Persistent|PixelGetColor|PixelSearch|PostMessage|ProcessClose|ProcessExist|ProcessSetPriority|ProcessWait|ProcessWaitClose|Random|RegDelete|RegDeleteKey|RegExMatch|RegExReplace|RegRead|RegWrite|Reload|Round|RTrim|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendLevel|SendMessage|SendMode|SendPlay|SendText|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapsLockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sin|Sleep|Sort|SoundBeep|SoundGetInterface|SoundGetMute|SoundGetName|SoundGetVolume|SoundPlay|SoundSetMute|SoundSetVolume|SplitPath|Sqrt|StatusBarGetText|StatusBarWait|StrCompare|StrGet|StrLen|StrLower|StrPtr|StrPut|StrReplace|StrSplit|StrTitle|StrUpper|SubStr|Suspend|SysGet|SysGetIPAddresses|Tan|Thread|ToolTip|TraySetIcon|TrayTip|Trim|Type|VarSetStrCapacity|VerCompare|WinActivate|WinActivateBottom|WinActive|WinClose|WinExist|WinGetClass|WinGetClientPos|WinGetControls|WinGetControlsHwnd|WinGetCount|WinGetExStyle|WinGetID|WinGetIDLast|WinGetList|WinGetMinMax|WinGetPID|WinGetPos|WinGetProcessName|WinGetProcessPath|WinGetStyle|WinGetText|WinGetTitle|WinGetTransColor|WinGetTransparent|WinHide|WinKill|WinMaximize|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinMoveBottom|WinMoveTop|WinRedraw|WinRestore|WinSetAlwaysOnTop|WinSetEnabled|WinSetExStyle|WinSetRegion|WinSetStyle|WinSetTitle|WinSetTransColor|WinSetTransparent|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b"
        name: support.function.ahk2
  hotkey_hotstring:
    patterns:
      - begin: "^\\s*(:)([^xX:]*)(:)((`.|[^`])*?)(::)(?!\\s*\\{\\s*(\\s;.*)?$)(.*?)(\\s;.*)?$"
        beginCaptures:
          '1':
            name: punctuation.definition.colon
          '2':
            patterns:
              - match: "(?i:(s[ipe]|[*?borstz]0?|c[01]?|k-1|[kp]\\d+|x))"
                name: string.options.ahk2 markup.italic
              - match: '.'
                name: invalid.options.ahk2 markup.strikethrough
          '3':
            name: punctuation.definition.colon
          '4':
            name: keyword.keys.ahk2 markup.underline
          '6':
            name: punctuation.definition.colon
          '8':
            name: string.literal.ahk2
          '9':
            name: comment.inline.ahk2
        name: hotstringline.ahk2
        end: "(?<=^\\s*)(})|(?=^\\s*([^\\s;/({]|/(?!\\*)|\\(.*\\)(?<!\\b(?i:join)\\S*\\))))"
        endCaptures:
          '1':
            name: punctuation.definition.block.hotstring.end.ahk2
        patterns:
          - begin: "(?<=\\G\\s*){"
            beginCaptures:
              '0':
                name: punctuation.definition.block.hotstring.begin.ahk2
            end: '(?=})'
            patterns:
              - include: '$base'
          - include: '#comments'
          - include: '#continuation_string'
          - match: "(?<=^\\s*\\)).+$"
            name: string.literal.ahk2
      - begin: "^\\s*(:)([^:]*)(:)((`.|[^`])*?)(::)(\\s+;.*)?"
        beginCaptures:
          '1':
            name: punctuation.definition.colon
          '2':
            patterns:
              - match: "(?i:(s[ipe]|[*?borstz]0?|c[01]?|k-1|[kp]\\d+|x))"
                name: string.options.ahk2 markup.italic
              - match: '.'
                name: invalid.options.ahk2 markup.strikethrough
          '3':
            name: punctuation.definition.colon
          '4':
            name: keyword.keys.ahk2 markup.underline
          '6':
            name: punctuation.definition.colon
          '7':
            name: comment.inline.ahk2
        end: "(?<=^\\s*)(})|(?<=::(;|\\s*[^;\\s])[^\\n]*)\\n|(?<=[\\w})\\]]\\s*)\\n"
        endCaptures:
          '1':
            name: punctuation.definition.block.hotstring.end.ahk2
        name: meta.block.hotstring.ahk2
        patterns:
          - begin: "\\G{"
            beginCaptures:
              '0':
                name: punctuation.definition.block.hotstring.begin.ahk2
            end: '(?=})'
            patterns:
              - include: '$base'
          - begin: "(?<=::\\s*)"
            end: "(?=\\n)"
            patterns:
              - include: '#line_continue'
              - include: '$base'
      - begin: "^\\s*(?i:((([<>$~*!+#^]*?)(`;|(?<=\\S);|[\\x21-\\x3A\\x3C-\\x7E]|\\w+|[^\\x00-\\x7f]))|~?(`;|(?<=\\S);|[\\x21-\\x3A\\x3C-\\x7E]|\\w+|[^\\x00-\\x7f])\\s+&\\s+~?(`;|(?<=\\S);|[\\x21-\\x3A\\x3C-\\x7E]|\\w+|[^\\x00-\\x7f]))(\\s+up)?)(::)"
        beginCaptures:
          '1':
            name: hotkey.ahk2
            patterns:
              - match: "(?<=\\s)&(?=\\s+\\S+(?i:\\s+up)?$)"
                name: keyword.operator.ahk2
              - match: "(?<=(&\\s+|^\\s*))([<>$~*!+#^]*?)(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheeldown|wheelup|wheelleft|wheelright|xbutton[12]|(0*[2-9]|0*1[0-6]?)?joy0*([1-9]|[12]\\d|3[12])|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|pgup|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpaddown|numpadup|numpadhome|numpadend|numpadpgdn|numpadpgup|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+|`[;{]|[\\x21-\\x3A\\x3C-\\x7E]|(?<=\\S);)(?=(\\s|$))"
                name: keyword.keys.ahk2
          '7':
            name: keyword.keys.up.ahk2
          '8':
            name: punctuation.definition.colon
        end: "(?<=^\\s*)(})|(?<=::(;|\\s*[^;\\s])[^\\n]*)\\n|(?<=[\\w})\\]]\\s*)\\n"
        endCaptures:
          '1':
            name: punctuation.definition.block.hotkey.end.ahk2
        name: meta.hotkeyline.ahk2
        patterns:
          - begin: '{'
            beginCaptures:
              '0':
                name: punctuation.definition.block.hotkey.begin.ahk2
            end: '(?=})'
            patterns:
              - include: '$base'
          - include: '#compiler_directive'
          - include: '#comments'
          - match: "(?<=\\G\\s*)((?i:alttab|alttabandmenu|alttabmenu|alttabmenudismiss|shiftalttab)\\b|([<>]?[!+#^]){0,4}(`{|`?;|[\\x21-\\x7A\\x7C-\\x7E]|(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheeldown|wheelup|wheelleft|wheelright|xbutton[12]|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|pgup|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpaddown|numpadup|numpadhome|numpadend|numpadpgdn|numpadpgup|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))(?=(\\s+(;.*)?)?\\n))"
            name: keyword.keys.ahk2
          - begin: "(?<=\\G\\s*)(?=\\S)"
            end: "(?=\\n)"
            patterns:
              - include: '#line_continue'
              - include: '$base'
          - include: '$self'
      - match: "^\\s*\\w+(:)(?=\\s*(\\s;.*)?$)"
        name: entity.name.label.ahk2
        captures:
          '1':
            name: punctuation.definition.colon
  inline-tags:
    patterns:
      - name: constant.other.description.jsdoc
        match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))"
        captures:
          '1':
            name: punctuation.definition.bracket.square.begin.jsdoc
          '2':
            name: punctuation.definition.bracket.square.end.jsdoc
      - name: entity.name.type.instance.jsdoc
        begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*"
        beginCaptures:
          '1':
            name: punctuation.definition.bracket.curly.begin.jsdoc
          '2':
            name: storage.type.class.jsdoc
          '3':
            name: punctuation.definition.inline.tag.jsdoc
        end: "}|(?=\\*/)"
        endCaptures:
          '0':
            name: punctuation.definition.bracket.curly.end.jsdoc
        patterns:
          - match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?"
            captures:
              '1':
                name: variable.other.link.underline.jsdoc
              '2':
                name: punctuation.separator.pipe.jsdoc
          - match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?"
            captures:
              '1':
                name: variable.other.description.jsdoc
              '2':
                name: punctuation.separator.pipe.jsdoc
  brackets:
    patterns:
      - begin: '{'
        end: "}|(?=\\*/)"
        patterns:
          - include: '#brackets'
      - begin: "\\["
        end: "\\]|(?=\\*/)"
        patterns:
          - include: '#brackets'
  jsdoctype:
    patterns:
      - contentName: meta.embedded.ahk2 entity.name.type.instance.jsdoc
        begin: "\\G({)"
        beginCaptures:
          '0':
            name: entity.name.type.instance.jsdoc
          '1':
            name: punctuation.definition.bracket.curly.begin.jsdoc
        end: "((}))\\s*|(?=\\*/)"
        endCaptures:
          '1':
            name: entity.name.type.instance.jsdoc
          '2':
            name: punctuation.definition.bracket.curly.end.jsdoc
        patterns:
          - include: '#brackets'
  keylist:
    match: "\\b(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheeldown|wheelup|wheelleft|wheelright|xbutton[12]|(0*[2-9]|0*1[0-6]?)?joy0*([1-9]|[12]\\d|3[12])|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|pgup|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpaddown|numpadup|numpadhome|numpadend|numpadpgdn|numpadpgup|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))\\b"
    name: keyword.keys.ahk2
  line_continue:
    begin: "([*/<>?:=.&|^]+|[~+\\-]=?|!==?|,|\\b(?i:(and|contain|not|in|is|or)))\\s*(\\s;.*)?\\n"
    beginCaptures:
      '1':
        patterns:
          - include: '#operators'
          - match: ','
            name: punctuation.separator.comma.ahk2
          - match: '=>'
            name: storage.type.function.arrow.ahk2
      '3':
        name: comment.inline.ahk2
    end: "(?!([*/<>?:=.]+|[+\\-]=?|!==?|,|\\b(?i:(and|contain|not|in|is|or))))\\s*(\\s;.*)?(?=\\n)|(?<=^\\s*(?i:class|static|if|try|loop|while)\\s+\\w+)"
    endCaptures:
      '3':
        name: comment.inline.ahk2
    patterns:
      - match: "(?<=^\\s*)\\w+(?=(\\n|\\s))"
        captures:
          '0':
            patterns:
              - include: '#variables'
      - include: '#line_continue'
      - include: '$base'
  numbers:
    match: "(?<!\\w\\.?)\\.?\\d(?:(?:[\\w\\.])|(?<=[eE])[+-])*"
    captures:
      '0':
        patterns:
          - begin: '(?=.)'
            end: '$'
            patterns:
              - match: "((0[xX][\\da-fA-F]+)|((\\d+(\\.\\d*)?|\\.\\d+)([eE][+\\-]?\\d+)?))$"
                name: constant.numeric.ahk2
              - match: "(?:(?:[\\w\\.])|(?<=[eE])[+-])+"
                name: invalid.illegal.constant.numeric
  object_property:
    patterns:
      - match: "(?<=[,{]\\s*)(\\w+)\\s*(:(?!=))"
        captures:
          '1':
            name: variable.other.property.ahk2
          '2':
            name: punctuation.separator.key-value.ahk2
        name: meta.objectliteral.ahk2
  operators:
    patterns:
      - match: "(?<!\\.)\\b(?i:and|or|not|in|is|contains)\\b(?!\\s*:)"
        name: keyword.operator.expression.ahk2
      - match: '--'
        name: keyword.operator.decrement.ahk2
      - match: "\\+\\+"
        name: keyword.operator.increment.ahk2
      - match: '=>'
        name: storage.type.function.arrow.ahk2
      - match: "\\.=|\\+=|-=|\\*=|/?/="
        name: keyword.operator.assignment.compound.ahk2
      - match: "&=|\\^=|<<=|>>>=|>>=|\\|="
        name: keyword.operator.assignment.compound.bitwise.ahk2
      - match: '<<|>>>|>>'
        name: keyword.operator.bitwise.shift.ahk2
      - match: '!=|<=|>=|=?=|<|>'
        name: keyword.operator.comparison.ahk2
      - match: '~='
        name: keyword.operator.regexp.ahk2
      - match: "\\?\\?|&&|!|\\|\\|"
        name: keyword.operator.logical.ahk2
      - match: "&|\\||\\^|~"
        name: keyword.operator.ahk2
      - match: ':='
        name: keyword.operator.assignment.ahk2
      - match: "\\.(?=\\w)"
        name: punctuation.accessor.ahk2
      - match: "\\*|/|-|\\+|\\."
        name: keyword.operator.ahk2
      - match: '%'
        name: punctuation.parens.percent.ahk2
      - match: "\\["
        name: punctuation.square.begin.ahk2
      - match: "\\]"
        name: punctuation.square.end.ahk2
      - match: "\\?(?=\\s*[,)\\]}])"
        name: keyword.operator.optional.ahk2
      - match: "\\?|:(?!\\:)"
        name: keyword.operator.ternary.ahk2
  parens:
    name: meta.parens.ahk2
    begin: "\\("
    beginCaptures:
      '0':
        name: punctuation.section.parens.begin.bracket.round.ahk2
    end: "\\)"
    endCaptures:
      '0':
        name: punctuation.section.parens.end.bracket.round.ahk2
    patterns:
      - include: '$base'
  pre_definition:
    patterns:
      - begin: "^\\s*((#)(?i:include(?i:again)?))\\b"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
        end: "(?=\\n)"
        name: meta.preprocessor.include.ahk2
        patterns:
          - begin: "[^\\s;]"
            end: "(?=(?:\\s+;))|(?=\\n)"
            name: string.literal.include.ahk2
          - match: "(?:\\s+);.*"
            name: comment.line.ahk2
      - begin: "^\\s*((#)(?i:dllload|mapcasesense|requires|errorstdout|definedefault(array|map|object)value|windowclass(gui|main)|singleinstance|targetcontrolerror|targetwindowerror))\\b"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
        end: "(?=(?:;))|(?=\\n)"
        name: meta.preprocessor.ahk2
        patterns:
          - begin: "[^\\s;]"
            end: "(?=(?:\\s+;))|(?=\\n)"
            name: string.quoted.ahk2
          - match: "(?:\\s+);.*"
            name: comment.line.ahk2
      - begin: "^\\s*((#)(?i:warn))\\b"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
        end: "(?=(?:;))|(?=\\n)"
        name: meta.preprocessor.ahk2
        patterns:
          - match: ','
            name: punctuation.separator.comma.ahk2
          - match: "\\w+"
            name: string.literal.ahk2
          - include: '#comments'
      - begin: "^\\s*((#)(?i:hotstring))\\b"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
        end: "(?=(?:;))|(?=\\n)"
        name: meta.preprocessor.ahk2
        patterns:
          - begin: "[^\\s;]"
            end: "(?=(?:\\s+;))|(?=\\n)"
            name: string.literal.ahk2
      - match: "^\\s*((#)(?i:clipboardtimeout|criticalobject(sleeptime|timeout)|hotif|hotiftimeout|inputlevel|initexec|maxthreads|maxthreadsbuffer|maxthreadsperhotkey|notrayicon|suspendexempt|usehook|warn|warncontinuableexception|winactivateforce))\\b"
        captures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
      - begin: "^\\s*((#)(?i:dllimport))(\\s+(\\w+)\\s*(,?))?"
        beginCaptures:
          '1':
            name: keyword.control.directive.ahk2
          '2':
            name: punctuation.definition.directive.ahk2
          '4':
            name: entity.name.function.ahk2
          '5':
            name: punctuation.separator.comma.ahk2
        end: "(?=(?:;))|(?=\\n)"
        name: meta.preprocessor.ahk2
        patterns:
          - match: ','
            name: punctuation.separator.comma.ahk2
          - match: "[^,\\n\\r]+"
            name: string.literal.ahk2
  reserved:
    patterns:
      - match: "(?<!\\.)((?i:break|continue|goto))\\s+([^;\\s]\\S*)"
        captures:
          '1':
            name: keyword.control.ahk2
          '2':
            name: entity.name.label.ahk2
      - match: "(?<!\\.)\\b(?i:break|continue|until|else|for|goto|if|throw|try|finally|return|while)\\b(?!\\s*:)"
        name: keyword.control.ahk2
      - match: "(?<!\\.)\\b(?i:loop)(\\s+(?i:files|parse|read|reg))?\\b"
        name: keyword.control.ahk2
      - match: "(?<!\\.)\\b(?i:global|local|static)\\b"
        name: storage.modifier.ahk2
      - match: "(?<!\\.)\\b(?i:isset)\\b"
        name: keyword.operator.wordlike.ahk2
  string_escaped_char:
    patterns:
      - match: (?i)`[abefnprstv'"`]
        name: constant.character.escape.ahk2
      - match: "(?<=^\\s*)`\\)"
        name: constant.character.escape.ahk2
      - match: '`.'
        name: invalid.illegal.unknown-escape.ahk2
  strings:
    patterns:
      - begin: (?<![\w)])(['"])
        beginCaptures:
          '1':
            name: punctuation.definition.string.begin.ahk2
        end: "(?<=(^\\s*\\)|\\1)(`.|.)*)(\\1)|(?=^\\s*([^\\s;/(]|/(?!\\*)|\\(.*\\)(?<!\\b(?i:join)\\S*\\))))"
        endCaptures:
          '3':
            name: punctuation.definition.string.end.ahk2
        name: string.quoted.ahk2
        patterns:
          - include: '#string_escaped_char'
          - include: '#comments'
          - include: '#continuation_string'
  continuation_string:
    begin: "(?<=^\\s*)(\\()(((?i:join)\\S*(?=\\s|$)|[^()]+(?=\\s|$))*)$"
    beginCaptures:
      '1':
        name: punctuation.section.parens.begin.bracket.round.ahk2
      '2':
        name: string.options.ahk2 markup.italic
        patterns:
          - match: "(?<=\\s);.*$"
            name: comment.inline.ahk2
          - match: "(?<=(\\s|^\\s*\\())((?!(?i:(c(om(ments)?)?|[lr]trim0?|`|join(`s|\\S){0,15}))(?=(\\s|$)))(\\S+)(?=(\\s|$)))"
            name: invalid.options.ahk2 markup.strikethrough
    end: "(?<=^\\s*)(\\))"
    endCaptures:
      '1':
        name: punctuation.section.parens.end.bracket.round.ahk2
    name: string.continuation
    patterns:
      - match: "(?<=^\\s*)`\\)"
        name: constant.character.escape.ahk2
      - include: '#string_escaped_char'
  switch_conditional_parentheses:
    name: meta.conditional.switch.ahk2
    begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()"
    beginCaptures:
      '1':
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
      '2':
        name: comment.block.ahk2 punctuation.definition.comment.begin.ahk2
      '3':
        name: comment.block.ahk2
      '4':
        patterns:
          - match: "\\*\\/"
            name: comment.block.ahk2 punctuation.definition.comment.end.ahk2
          - match: "\\*"
            name: comment.block.ahk2
      '5':
        name: punctuation.section.parens.begin.bracket.round.conditional.switch.ahk2
    end: "(\\))"
    endCaptures:
      '1':
        name: punctuation.section.parens.end.bracket.round.conditional.switch.ahk2
    patterns:
      - include: '#conditional_context'
  switch_statement:
    name: meta.block.switch.ahk2
    begin: "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)(?i:switch)(?!\\w)))"
    beginCaptures:
      '1':
        name: meta.head.switch.ahk2
      '2':
        patterns:
          - include: '#compiler_directive'
          - include: '#comments'
      '3':
        name: comment.block.ahk2 punctuation.definition.comment.begin.ahk2
      '4':
        name: comment.block.ahk2
      '5':
        patterns:
          - match: "\\*\\/"
            name: comment.block.ahk2 punctuation.definition.comment.end.ahk2
          - match: "\\*"
            name: comment.block.ahk2
      '6':
        name: keyword.control.ahk2
    end: "(?:(?<=\\})|(?=[>\\[\\]=]))"
    patterns:
      - name: meta.head.switch.ahk2
        begin: "\\G ?"
        end: "(?<!^\\s*)(\\{)(?=\\s*(;.*)?$)|(?<=^\\s*)(\\{)"
        endCaptures:
          '1':
            name: punctuation.section.block.begin.switch.ahk2
          '3':
            name: punctuation.section.block.begin.switch.ahk2
        patterns:
          - include: '#switch_conditional_parentheses'
          - include: '$self'
      - name: meta.body.switch.ahk2
        begin: "(?<=\\{)"
        end: "(\\})"
        endCaptures:
          '1':
            name: punctuation.section.block.end.switch.ahk2
        patterns:
          - include: '#default_statement'
          - include: '#case_statement'
          - include: '$self'
          - include: '#block_innards'
      - name: meta.tail.switch.ahk2
        begin: "(?<=\\})[\\s\\n]*"
        end: "[\\s\\n]*"
        patterns:
          - include: '$self'
  variables_language:
    patterns:
      - match: "\\b(?i:true|false|unset)\\b"
        name: constant.language.ahk2
      - match: "\\b(?i:this|super)\\b"
        name: variable.language.this.ahk2
      - match: "\\b(?i:value)\\b"
        name: variable.language.value.ahk2
      - match: "\\b(?i:thishotkey)\\b"
        name: variable.language.thishotkey.ahk2
      - match: "\\b(?i:A_AhkPath|A_AhkVersion|A_AllowMainWindow|A_AppData|A_AppDataCommon|A_Args|A_Clipboard|A_ComputerName|A_ComSpec|A_ControlDelay|A_CoordModeCaret|A_CoordModeMenu|A_CoordModeMouse|A_CoordModePixel|A_CoordModeToolTip|A_Cursor|A_DD|A_DDD|A_DDDD|A_DefaultMouseSpeed|A_Desktop|A_DesktopCommon|A_DetectHiddenText|A_DetectHiddenWindows|A_EndChar|A_EventInfo|A_FileEncoding|A_HotkeyInterval|A_HotkeyModifierTimeout|A_Hour|A_IconFile|A_IconHidden|A_IconNumber|A_IconTip|A_Index|A_InitialWorkingDir|A_Is64bitOS|A_IsAdmin|A_IsCompiled|A_IsCritical|A_IsPaused|A_IsSuspended|A_KeyDelay|A_KeyDelayPlay|A_KeyDuration|A_KeyDurationPlay|A_Language|A_LastError|A_LineFile|A_LineNumber|A_ListLines|A_LoopField|A_LoopFileAttrib|A_LoopFileDir|A_LoopFileExt|A_LoopFileFullPath|A_LoopFileName|A_LoopFilePath|A_LoopFileShortName|A_LoopFileShortPath|A_LoopFileSize|A_LoopFileSizeKB|A_LoopFileSizeMB|A_LoopFileTimeAccessed|A_LoopFileTimeCreated|A_LoopFileTimeModified|A_LoopReadLine|A_LoopRegKey|A_LoopRegName|A_LoopRegTimeModified|A_LoopRegType|A_MaxHotkeysPerInterval|A_MDay|A_MenuMaskKey|A_Min|A_MM|A_MMM|A_MMMM|A_Mon|A_MouseDelay|A_MouseDelayPlay|A_MSec|A_MyDocuments|A_Now|A_NowUTC|A_OSVersion|A_PriorHotkey|A_PriorKey|A_ProgramFiles|A_Programs|A_ProgramsCommon|A_PtrSize|A_RegView|A_ScreenDPI|A_ScreenHeight|A_ScreenWidth|A_ScriptDir|A_ScriptFullPath|A_ScriptHwnd|A_ScriptName|A_Sec|A_SendLevel|A_SendMode|A_Space|A_StartMenu|A_StartMenuCommon|A_Startup|A_StartupCommon|A_StoreCapsLockMode|A_Tab|A_Temp|A_ThisFunc|A_ThisHotkey|A_TickCount|A_TimeIdle|A_TimeIdleKeyboard|A_TimeIdleMouse|A_TimeIdlePhysical|A_TimeSincePriorHotkey|A_TimeSinceThisHotkey|A_TitleMatchMode|A_TitleMatchModeSpeed|A_TrayMenu|A_UserName|A_WDay|A_WinDelay|A_WinDir|A_WorkingDir|A_YDay|A_Year|A_YWeek|A_YYYY)\\b"
        name: variable.language.ahk2
      - match: "\\b(?i:A_PriorLine|A_WorkFileName)\\b"
        name: variable.language.compiler.ahk2
      - match: "\\b(?i:A_AhkDir|A_DllDir|A_DllPath|A_GlobalStruct|A_IsDll|A_MainThreadID|A_MemoryModule|A_ModuleHandle|A_ScriptStruct|A_ThreadID|A_ZipCompressionLevel)\\b"
        name: variable.language.ahkh.ahk2
      - include: '#default_classes'
      - include: '#function_defaultLibrary'
  variables:
    match: "(?<!\\.)\\b((\\w+(?=\\.))|(\\w+\\b(?!\\()))"
    captures:
      '2':
        patterns:
          - include: '#variables_language'
        name: variable.other.object.ahk2
      '3':
        patterns:
          - include: '#variables_language'
    name: variable.other.ahk2
